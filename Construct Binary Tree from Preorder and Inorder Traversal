/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer>sc=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            sc.put(inorder[i],i);
        }
        TreeNode root=build(preorder,inorder,0,preorder.length-1,0,inorder.length-1,sc);
        return root;
    }
    public TreeNode build(int[]preorder,int[]inorder,int prestart,int preend,int instart,int inend,HashMap<Integer,Integer>sc){
        if(prestart>preend||instart>inend){
            return null;
        }
        TreeNode root=new TreeNode(preorder[prestart]);
        int nums=sc.get(preorder[prestart]);
        int le=nums-instart;
        root.left=build(preorder,inorder,prestart+1,prestart+le,instart,nums-1,sc);
        root.right=build(preorder,inorder,prestart+le+1,preend,nums+1,inend,sc);
        return root;
    }
}
