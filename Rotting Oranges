class Pair{
    int row;
    int col;
    int time;
    Pair(int row,int col,int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<Pair>sc=new LinkedList<>();
        int n=grid.length;
        int m=grid[0].length;
        int cntFresh=0;
        int  vis[][]=new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    sc.add(new Pair(i,j,0));
                    vis[i][j]=2;
                }
                else{
                    vis[i][j]=0;
                }
                if(grid[i][j]==1){
                    cntFresh++;
                }
            }
        }
        int rowd[]={-1, 0, +1, 0};
        int cold[]={0,1,0,-1};
        int timemax=0;
        int cnt=0;
        while(!sc.isEmpty()){
            int r = sc.peek().row;
             int c = sc.peek().col;
             int t = sc.peek().time;
             timemax=Math.max(timemax,t);
             sc.remove();
             for(int i=0;i<4;i++){
                 int nrow=r+rowd[i];
                 int ncol=c+cold[i];
                 if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m&&vis[nrow][ncol]==0 && grid[nrow][ncol]==1)  {
        sc.add(new Pair(nrow, ncol, t + 1));
          // mark as rotten
          vis[nrow][ncol] = 2;
          cnt++;
                 }
             }
        }
        if(cnt!=cntFresh){
           return -1;
       }
       return timemax;
        }
    }
